<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<!--bean For Session, this will be used by User -->
	<bean id="sessionManager" class="com.boilerplate.sessions.SessionManager"
		init-method="initialize">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="session" ref="session" />
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="userService" ref="userService"></property>
	</bean>
	<!-- This is one of the possible implementations for session -->
	<bean id="session"
		class="com.boilerplate.database.redis.implementation.RedisSession">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>
	<!-- Beans for Users, use either MySQLUsers or one of the other implementations 
		of users -->
	<bean id="userService" class="com.boilerplate.service.implemetations.UserService">
		<property name="sessionManager" ref="sessionManager"></property>
		<property name="mySqlUser" ref="mySqlUser"></property>
	</bean>
	<bean id="roleService" class="com.boilerplate.service.implemetations.RoleService"
		init-method="initialize">
		<property name="role" ref="role" />
	</bean>
	<!-- Bean for the Redis Queue Data Access Layer -->
	<bean id="redisQueueDataAccessLayer"
		class="com.boilerplate.database.redis.implementation.RedisQueueDataAccessLayer">
	</bean>
	<bean id="userRoleService" class="com.boilerplate.service.implemetations.UserRoleService">
		<property name="roleService" ref="roleService" />
		<property name="userService" ref="userService" />
	</bean>
	<!-- Bean for Redis Queue -->
	<bean id="redisQueue" class="com.boilerplate.queue.RedisQueue">
		<property name="redisQueueDataAccessLayer" ref="redisQueueDataAccessLayer"></property>
	</bean>


	<bean id="queueReaderJob" class="com.boilerplate.jobs.QueueReaderJob">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="asyncWorkDispatcher" ref="asyncWorkDispatcher"></property>
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- Bean for configuration from database, select between one possible confirguration 
		stores from MySQL, Cassandra, Mongo etc. -->
	<bean id="databaseConfiguration"
		class="com.boilerplate.database.redis.implementation.RedisConfiguration">
	</bean>
	<bean id="configurationManager" class="com.boilerplate.configurations.ConfigurationManager"
		init-method="initialize">
		<property name="databaseConfiguration" ref="databaseConfiguration"></property>
	</bean>


	<!-- Bean for content management -->
	<bean id="content"
		class="com.boilerplate.database.redis.implementation.RedisContent">
	</bean>
	<bean id="contentService" class="com.boilerplate.service.implemetations.ContentService"
		init-method="initialize">
		<property name="content" ref="content"></property>
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<bean id="methodPermissions"
		class="com.boilerplate.database.redis.implementation.RedisMethodPermissions">
	</bean>
	<bean id="methodPermissionService"
		class="com.boilerplate.service.implemetations.MethodPermissionsService"
		init-method="initialize">
		<property name="methodPermissions" ref="methodPermissions"></property>
	</bean>



	<bean id="sourceObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" />
	<bean id="acmObjectMapper"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject" ref="sourceObjectMapper" />
		<property name="targetMethod" value="disable" />
		<property name="arguments" value="WRITE_DATES_AS_TIMESTAMPS" />
	</bean>
	<bean id="acmJacksonConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="objectMapper" ref="acmObjectMapper" />
	</bean>

	<!-- Add or remover observers for the jobs here -->
	<bean id="asyncWorkDispatcher" class="com.boilerplate.asyncWork.AsyncWorkDispatcher">
		<property name="dispatchMap">
			<map>
				<!-- Each entry should have a subject and observer -->
				<entry key="ALL" value-ref="allAsyncJobObservers" /> <!-- The value ref is the list of observers for the subject -->

				<!-- This is for saving the work to the database async -->
			</map>


		</property>
	</bean>



	<bean id="diagnostic"
		class="com.boilerplate.database.redis.implementation.RedisDiagnostics" />

	<bean id="clientSideLog" class="com.boilerplate.asyncWork.ClientSideLog">
		<property name="diagnostic" ref="diagnostic"></property>
	</bean>

	<bean id="clientSideLogObserver"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="clientSideLog"></ref>
			</list>
		</property>
	</bean>

	<bean id="allAsyncJobObservers"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- Add observers for the subject. -->
				<!-- This observer logs every action done asynchronously and should be 
					removed/disabled -->
				<!-- <bean class="com.boilerplate.asyncWork.LogObserver"/> -->
			</list>
		</property>
	</bean>



	<bean id="publishLibrary" class="com.boilerplate.aspects.PublishLibrary">
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>


	<bean id="authTokenService" class="com.boilerplate.service.implemetations.AuthTokenService">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>
	<bean id="iPingService" class="com.boilerplate.service.implemetations.PingService"
		init-method="initilize">
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="sesionManager" ref="sessionManager"></property>
		<property name="mysqlPing" ref="mysqlPing"></property>
	</bean>

	<bean id="role" class="com.boilerplate.database.redis.implementation.RedisRole" />

	<bean id="assessment"
		class="com.boilerplate.database.mysql.implementations.MySQLAssessment">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>


	<bean id="article"
		class="com.boilerplate.database.mysql.implementations.MySQLArticle">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<bean id="redisAssessment"
		class="com.boilerplate.database.redis.implementation.RedisAssessment">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>
	<bean id="redisScript"
		class="com.boilerplate.database.redis.implementation.RedisScript">
	</bean>
	<bean id="mysqlPing"
		class="com.boilerplate.database.mysql.implementations.MySQLPing">
	</bean>

	<bean id="sendSmsService" class="com.boilerplate.service.implemetations.SendSMSService">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
	</bean>



	<bean id="fileService" class="com.boilerplate.service.implemetations.FileService">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="file" ref="file"></property>
		<property name="filePointer" ref="filePointer"></property>
	</bean>

	<bean id="filePointer"
		class="com.boilerplate.database.redis.implementation.RedisFilePointer">
	</bean>
	<!--Bean for S3File -->
	<bean id="file"
		class="com.boilerplate.databases.s3FileSystem.implementations.S3File">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="26843545" /> <!-- 25 megs -->
	</bean>

	<!-- Bean for contact us data access -->
	<bean id="contactUsDataAccess"
		class="com.boilerplate.database.redis.implementation.RedisContactUs">
	</bean>
	<bean id="referral"
		class="com.boilerplate.database.redis.implementation.RedisReferral">
		<property name="configurationManager" ref="configurationManager"></property>

	</bean>

	<bean id="redisSFUpdateHashAccess"
		class="com.boilerplate.database.redis.implementation.RedisSFUpdateHash">
	</bean>
	<bean id="emiCalculatorService"
		class="com.boilerplate.service.implemetations.EmiCalculatorService">
	</bean>
	<bean id="currencyConversionService"
		class="com.boilerplate.service.implemetations.CurrencyConversionService">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<bean id="blogActivityService"
		class="com.boilerplate.service.implemetations.BlogActivityService">
		<property name="blogActivityDataAccess" ref="blogActivityDataAccess"></property>
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>
	<!-- Bean for redis BlogActivity data access -->
	<bean id="blogActivityDataAccess"
		class="com.boilerplate.database.redis.implementation.RedisBlogActivity">
	</bean>


	<bean id="mysqlReport"
		class="com.boilerplate.database.mysql.implementations.MySQLReport">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>
	<bean id="experianDataAccess"
		class="com.boilerplate.database.redis.implementation.RedisVoucher"
		init-method="initialize">
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<bean id="reportDataAccess"
		class="com.boilerplate.database.redis.implementation.RedisReport">
	</bean>

	<!-- Dependencies for CheckList APIs Related classes -->
	<bean id="checkListService" class="com.boilerplate.service.implemetations.CheckListService">
		<property name="checkListDataAccess" ref="checkListDataAccess">
		</property>
	</bean>

	<bean id="checkListDataAccess"
		class="com.boilerplate.database.redis.implementation.RedisCheckList">
	</bean>

	<!-- Dependencies related to Handbook apis -->
	<bean id="handbookService" class="com.boilerplate.service.implemetations.HandbookService">
		<property name="mySqlHandbook" ref="mySqlHandbook"></property>
	</bean>

	<bean id="mySqlHandbook"
		class="com.boilerplate.database.mysql.implementations.MySQLHandbook">
	</bean>


	<!-- Dependencies related to IncomeTax related apis -->

	<bean id="incomeTaxDataAccess"
		class="com.boilerplate.database.redis.implementation.RedisIncomeTax">
	</bean>


	<bean id="mySQLIncomeTax"
		class="com.boilerplate.database.mysql.implementations.MySQLIncomeTax">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<!--Dependencies for saving user in mysql database -->
	<bean id="mySqlUser"
		class="com.boilerplate.database.mysql.implementations.MySQLUsers">
		<property name="configurationManager" ref="configurationManager" />
	</bean>

	<bean id="mySQLQueueWriterJob" class="com.boilerplate.jobs.MySQLQueueWriterJob"
		init-method="initialize">
		<property name="queueReaderJob" ref="queueReaderJob" />
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="redisAssessment" ref="redisAssessment"></property>
		<property name="referral" ref="referral" />
		<property name="blogActivityDataAccess" ref="blogActivityDataAccess" />
		<property name="filePointer" ref="filePointer" />
	</bean>


	<!-- dependency for statistics related apis -->
	<bean id="statisticsService"
		class="com.boilerplate.service.implemetations.StatisticsService">
		<property name="mySQLAksharArticles" ref="mySQLAksharArticles"></property>
		<property name="blogActivityDataAccess" ref="blogActivityDataAccess"></property>
		<property name="assessment" ref="assessment"></property>
	</bean>

	<bean id="mySQLAksharArticles"
		class="com.boilerplate.database.mysql.implementations.MySQLAksharArticles">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<bean id="expressDataAccess"
		class="com.boilerplate.database.redis.implementation.RedisExpress">
	</bean>
	<bean id="expressService" class="com.boilerplate.service.implemetations.ExpressService">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="expressDataAccess" ref="expressDataAccess"></property>
	</bean>



	<bean id="mySQLBankDataAccess"
		class="com.boilerplate.database.mysql.implementations.MySQLBankData">
	</bean>



	<!-- beans and dependencies for lesson APIs -->

	<bean id="moduleService" class="com.boilerplate.service.implemetations.ModuleService">
		<property name="mySQLModule" ref="mySQLModule"></property>
	</bean>

	<bean id="mySQLModule"
		class="com.boilerplate.database.mysql.implementations.MySQLModule">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

</beans>
 
