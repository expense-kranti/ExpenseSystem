<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<!--bean For Session, this will be used by User -->
	<bean id="sessionManager" class="com.boilerplate.sessions.SessionManager"
		init-method="initialize">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="session" ref="session" />
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="userService" ref="userService"></property>
	</bean>
	<!-- This is one of the possible implementations for session -->
	<bean id="session"
		class="com.boilerplate.database.redis.implementation.RedisSession">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<!-- Beans for Users, use either MySQLUsers or one of the other implementations 
		of users -->
	<bean id="userService" class="com.boilerplate.service.implemetations.UserService"
		init-method="initilize">
		<property name="userRole" ref="userRole" />
		<property name="roleService" ref="roleService"></property>
		<property name="userDataAccess" ref="userDataAccess"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="sessionManager" ref="sessionManager"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="sendRegistrationSMSObserver" ref="sendRegistrationSMSObserver"></property>
		<property name="sendRegistrationEmailObserver" ref="sendRegistrationEmailObserver"></property>
		<property name="redisSFUpdateHashAccess" ref="redisSFUpdateHashAccess"></property>
		<property name="referral" ref="referral"></property>
	</bean>
	<bean id="roleService" class="com.boilerplate.service.implemetations.RoleService"
		init-method="initialize">
		<property name="role" ref="role" />
	</bean>
	<!-- Bean for the Redis Queue Data Access Layer -->
	<bean id="redisQueueDataAccessLayer"
		class="com.boilerplate.database.redis.implementation.RedisQueueDataAccessLayer">
	</bean>
	<bean id="userRoleService" class="com.boilerplate.service.implemetations.UserRoleService">
		<property name="roleService" ref="roleService" />
		<property name="userService" ref="userService" />
		<property name="userRole" ref="userRole" />
	</bean>
	<!-- Bean for Redis Queue -->
	<bean id="redisQueue" class="com.boilerplate.queue.RedisQueue">
		<property name="redisQueueDataAccessLayer" ref="redisQueueDataAccessLayer"></property>
	</bean>

	<!-- Use one of the possible implementations of the User -->
	<bean id="userDataAccess"
		class="com.boilerplate.database.redis.implementation.RedisUsers">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<bean id="queueReaderJob" class="com.boilerplate.jobs.QueueReaderJob">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="asyncWorkDispatcher" ref="asyncWorkDispatcher"></property>
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- Bean for configuration from database, select between one possible confirguration 
		stores from MySQL, Cassandra, Mongo etc. -->
	<bean id="databaseConfiguration"
		class="com.boilerplate.database.redis.implementation.RedisConfiguration">
	</bean>
	<bean id="configurationManager" class="com.boilerplate.configurations.ConfigurationManager"
		init-method="initialize">
		<property name="databaseConfiguration" ref="databaseConfiguration"></property>
	</bean>


	<!-- Bean for content management -->
	<bean id="content"
		class="com.boilerplate.database.redis.implementation.RedisContent">
	</bean>
	<bean id="contentService" class="com.boilerplate.service.implemetations.ContentService"
		init-method="initialize">
		<property name="content" ref="content"></property>
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<bean id="methodPermissions"
		class="com.boilerplate.database.redis.implementation.RedisMethodPermissions">
	</bean>
	<bean id="methodPermissionService"
		class="com.boilerplate.service.implemetations.MethodPermissionsService"
		init-method="initialize">
		<property name="methodPermissions" ref="methodPermissions"></property>
	</bean>



	<bean id="sourceObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" />
	<bean id="acmObjectMapper"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject" ref="sourceObjectMapper" />
		<property name="targetMethod" value="disable" />
		<property name="arguments" value="WRITE_DATES_AS_TIMESTAMPS" />
	</bean>
	<bean id="acmJacksonConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="objectMapper" ref="acmObjectMapper" />
	</bean>

	<!-- Add or remover observers for the jobs here -->
	<bean id="asyncWorkDispatcher" class="com.boilerplate.asyncWork.AsyncWorkDispatcher">
		<property name="dispatchMap">
			<map>
				<!-- Each entry should have a subject and observer -->
				<entry key="ALL" value-ref="allAsyncJobObservers" /> <!-- The value ref is the list of observers for the subject -->

				<!-- This is for saving the work to the database async -->
				<entry key="SaveSessionToDatabase" value-ref="saveSessionToDatabaseObservers" />


				<entry key="CreateUser" value-ref="createUserObserver" />


				<entry key="ClientSideLog" value-ref="clientSideLogObserver" />

				<entry key="CalculateTotalScore" value-ref="calculateTotalScore" />
				<entry key="AutomaticPasswordReset" value-ref="passwordResetObserver" />
				<entry key="PasswordChange" value-ref="passwordChangeObserver" />
				<entry key="ContactUs" value-ref="onContactUs" />
				<entry key="SendEmailArticle" value-ref="sendEmailArticle" />
				<entry key="Publish" value-ref="onPublish" />
				<entry key="CREATE_USER_AKS" value-ref="onBulkPublish" />
				<entry key="REPORT_CREATED_AKS" value-ref="onBulkPublish" />
				<entry key="REFER_REPORT_CREATED_AKS" value-ref="onBulkPublish" />
				<entry key="PublishUserData" value-ref="publishUserData" />
				<entry key="SetUserChangePasswordStatus" value-ref="setUserChangePasswordStatus" />

				<entry key="SendSMSToReferredUser" value-ref="userReferredObserverForSMS" />
				<entry key="SendEmailToReferredUser" value-ref="userReferredObserverForEmail"></entry>
				<entry key="UpdateReferScore" value-ref="updateReferScore"></entry>
				<entry key="PublishReferReport" value-ref="publishReferReport"></entry>
				<entry key="FeedbackSubmit" value-ref="feedbackSubmittedObserver"></entry>

			</map>


		</property>
	</bean>



	<bean id="diagnostic"
		class="com.boilerplate.database.redis.implementation.RedisDiagnostics" />

	<bean id="clientSideLog" class="com.boilerplate.asyncWork.ClientSideLog">
		<property name="diagnostic" ref="diagnostic"></property>
	</bean>

	<bean id="clientSideLogObserver"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="clientSideLog"></ref>
			</list>
		</property>
	</bean>

	<bean id="allAsyncJobObservers"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- Add observers for the subject. -->
				<!-- This observer logs every action done asynchronously and should be 
					removed/disabled -->
				<!-- <bean class="com.boilerplate.asyncWork.LogObserver"/> -->
			</list>
		</property>
	</bean>

	<bean id="saveSessionToDatabaseObservers"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<bean class="com.boilerplate.asyncWork.SaveSessionToDatabaseObserver">
					<property name="sessionManager" ref="sessionManager"></property>
				</bean>
			</list>
		</property>
	</bean>

	<bean id="createUserObserver"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="sendRegistrationSMSObserver"></ref>
				<ref bean="sendRegistrationEmailObserver"></ref>
			</list>
		</property>
	</bean>

	<bean id="calculateTotalScore"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="calculateTotalScoreObserver"></ref>
			</list>
		</property>
	</bean>
	<bean id="publishUserData"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="publishUserDataObserver"></ref>
			</list>
		</property>
	</bean>

	<bean id="setUserChangePasswordStatus"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="setUserChangePasswordStatusObserver"></ref>
			</list>
		</property>
	</bean>

	<bean id="userReferredObserverForSMS"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="sendSmsToReferredUserObserver" />
			</list>
		</property>
	</bean>

	<bean id="updateReferScore"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="updateReferScoreObserver" />
			</list>
		</property>
	</bean>

	<bean id="userReferredObserverForEmail"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="sendEmailToReferredUserObserver" />
			</list>
		</property>
	</bean>

	<bean id="publishReferReport"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="publishReferReportObserver" />
			</list>
		</property>
	</bean>

	<bean id="sendRegistrationSMSObserver" class="com.boilerplate.asyncWork.SendRegistrationSMSObserver">
		<property name="contentService" ref="contentService"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="sendSmsService" ref="sendSmsService"></property>
	</bean>


	<bean id="sendRegistrationEmailObserver" class="com.boilerplate.asyncWork.SendRegistrationEmailObserver">
		<property name="contentService" ref="contentService"></property>
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<bean id="calculateTotalScoreObserver" class="com.boilerplate.asyncWork.CalculateTotalScoreObserver">
		<property name="redisAssessment" ref="redisAssessment"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="assessmentService" ref="assessmentService"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
	</bean>

	<bean id="publishUserDataObserver" class="com.boilerplate.asyncWork.PublishUserDataObserver">
		<property name="redisScript" ref="redisScript"></property>
		<property name="redisAssessment" ref="redisAssessment"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="assessmentService" ref="assessmentService"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="userDataAccess" ref="userDataAccess"></property>
	</bean>


	<bean id="sendSmsToReferredUserObserver" class="com.boilerplate.asyncWork.SendSmsToReferredUserObserver">
		<property name="contentService" ref="contentService"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="sendSmsService" ref="sendSmsService"></property>
		<property name="userDataAccess" ref="userDataAccess"></property>
		<property name="referralService" ref="referralService"></property>
		<property name="referral" ref="referral"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
	</bean>

	<bean id="updateReferScoreObserver" class="com.boilerplate.asyncWork.UpdateRefererScoreObserver">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="redisAssessment" ref="redisAssessment"></property>
		<property name="referral" ref="referral"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
	</bean>

	<bean id="sendEmailToReferredUserObserver"
		class="com.boilerplate.asyncWork.SendEmailToReferredUserObserver">
		<property name="contentService" ref="contentService"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="userDataAccess" ref="userDataAccess"></property>
		<property name="referralService" ref="referralService"></property>
		<property name="referral" ref="referral"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="fileService" ref="fileService"></property>
		<property name="file" ref="file"></property>
	</bean>



	<bean id="setUserChangePasswordStatusObserver"
		class="com.boilerplate.asyncWork.SetUserChangePasswordStatusObserver">
		<property name="redisScript" ref="redisScript"></property>
		<property name="userDataAccess" ref="userDataAccess"></property>
	</bean>


	<bean id="publishLibrary" class="com.boilerplate.aspects.PublishLibrary">
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="sendEmailOnUnsuccessfulBulkPublish" ref="sendEmailOnUnsuccessfulBulkPublish"></property>
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<bean id="onPublish"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="publishObserver"></ref>
			</list>
		</property>
	</bean>
	<bean id="publishObserver" class="com.boilerplate.asyncWork.PublishObserver">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="authTokenService" ref="authTokenService"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="userService" ref="userService"></property>
		<property name="redisSFUpdateHashAccess" ref="redisSFUpdateHashAccess"></property>
		<property name="sendEmailOnUnsuccessfulBulkPublish" ref="sendEmailOnUnsuccessfulBulkPublish"></property>
	</bean>

	<bean id="publishReferReportObserver" class="com.boilerplate.asyncWork.PublishReferReportObserver">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
	</bean>


	<bean id="authTokenService" class="com.boilerplate.service.implemetations.AuthTokenService">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>
	<bean id="iPingService" class="com.boilerplate.service.implemetations.PingService"
		init-method="initilize">
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="sesionManager" ref="sessionManager"></property>
		<property name="mysqlPing" ref="mysqlPing"></property>
	</bean>

	<bean id="role" class="com.boilerplate.database.redis.implementation.RedisRole" />



	<bean id="userRole"
		class="com.boilerplate.database.redis.implementation.RedisUserRoles">
		<property name="redisUsers" ref="userDataAccess"></property>
	</bean>

	<bean id="assessmentService" class="com.boilerplate.service.implemetations.AssesmentService"
		init-method="initilize">
		<property name="assessment" ref="assessment"></property>
		<property name="redisAssessment" ref="redisAssessment"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="calculateTotalScoreObserver" ref="calculateTotalScoreObserver"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="userDataAccess" ref="userDataAccess"></property>
	</bean>

	<bean id="assessment"
		class="com.boilerplate.database.mysql.implementations.MySQLAssessment">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<bean id="articleService" class="com.boilerplate.service.implemetations.ArticleService"
		init-method="initialize">
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="article" ref="article"></property>
	</bean>

	<bean id="article"
		class="com.boilerplate.database.mysql.implementations.MySQLArticle">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>

	<bean id="redisAssessment"
		class="com.boilerplate.database.redis.implementation.RedisAssessment">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>
	<bean id="redisScript"
		class="com.boilerplate.database.redis.implementation.RedisScript">
	</bean>
	<bean id="mysqlPing"
		class="com.boilerplate.database.mysql.implementations.MySQLPing">
	</bean>

	<bean id="sendSmsService" class="com.boilerplate.service.implemetations.SendSMSService">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
	</bean>

	<bean id="passwordResetObserver"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="sendPasswordResetSMSObserver"></ref>
			</list>
		</property>
	</bean>
	<bean id="sendPasswordResetSMSObserver" class="com.boilerplate.asyncWork.SendPasswordResetSMSObserver">
		<property name="contentService" ref="contentService"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="userService" ref="userService" />
		<property name="sendSmsService" ref="sendSmsService"></property>
	</bean>
	<bean id="passwordChangeObserver"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="sendSMSOnPasswordChange"></ref>
			</list>
		</property>
	</bean>

	<bean id="sendSMSOnPasswordChange" class="com.boilerplate.asyncWork.SendSMSOnPasswordChange">
		<property name="contentService" ref="contentService"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="sendSmsService" ref="sendSmsService"></property>
	</bean>

	<bean id="fileService" class="com.boilerplate.service.implemetations.FileService">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="file" ref="file"></property>
		<property name="filePointer" ref="filePointer"></property>
	</bean>

	<bean id="filePointer"
		class="com.boilerplate.database.redis.implementation.RedisFilePointer">
	</bean>
	<!--Bean for S3File -->
	<bean id="file"
		class="com.boilerplate.databases.s3FileSystem.implementations.S3File">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="26843545" /> <!-- 25 megs -->
	</bean>

	<!-- Bean for contact us data access -->
	<bean id="contactUsDataAccess"
		class="com.boilerplate.database.redis.implementation.RedisContactUs">
	</bean>
	<bean id="referral"
		class="com.boilerplate.database.redis.implementation.RedisReferral">
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>
	<!-- Bean for contact us service -->
	<bean id="contactUsService" class="com.boilerplate.service.implemetations.ContactUsService"
		init-method="initialize">
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="contactUsDataAccess" ref="contactUsDataAccess"></property>
	</bean>
	<bean id="referralService" class="com.boilerplate.service.implemetations.ReferralService"
		init-method="initialize">
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="referral" ref="referral"></property>
		<property name="sendSmsToReferredUserObserver" ref="sendSmsToReferredUserObserver"></property>
		<property name="sendEmailToReferredUserObserver" ref="sendEmailToReferredUserObserver"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="redisSFUpdateHashAccess" ref="redisSFUpdateHashAccess"></property>
		<property name="userDataAccess" ref="userDataAccess"></property>
	</bean>

	<!-- Contact us AsyncWorkDispatcherObserverList -->
	<bean id="onContactUs"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="contactUsObserver"></ref>
			</list>
		</property>
	</bean>
	<!-- Contact us AsyncWorkDispatcherObserverList -->
	<bean id="sendEmailArticle"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="sendEmailArticleObserver"></ref>
			</list>
		</property>
	</bean>

	<!-- contactUsObserver -->
	<bean id="sendEmailArticleObserver" class="com.boilerplate.asyncWork.SendEmailArticleObserver">
		<property name="contentService" ref="contentService"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="userService" ref="userService"></property>
	</bean>

	<!-- contactUsObserver -->
	<bean id="contactUsObserver" class="com.boilerplate.asyncWork.ContactUsObserver">
		<property name="contentService" ref="contentService"></property>
		<property name="configurationManager" ref="configurationManager"></property>
	</bean>
	<bean id="sendEmailOnUnsuccessfulBulkPublish"
		class="com.boilerplate.asyncWork.SendEmailOnUnsuccessfulBulkPublish">
		<property name="contentService" ref="contentService"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="file" ref="file"></property>
	</bean>
	<bean id="onBulkPublish"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<!-- This is the class that will save sessions to the database Also the 
					data we put in will get logged as the log observer is enabled for everything -->
				<ref bean="publishBulkObserver"></ref>
				<ref bean="sendEmailOnUnsuccessfulBulkPublish"></ref>
			</list>
		</property>
	</bean>
	<bean id="publishBulkObserver" class="com.boilerplate.asyncWork.PublishBulkObserver">
		<property name="authTokenService" ref="authTokenService"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="userService" ref="userService"></property>
		<property name="sendEmailOnUnsuccessfulBulkPublish" ref="sendEmailOnUnsuccessfulBulkPublish"></property>
	</bean>
	<bean id="redisSFUpdateHashAccess"
		class="com.boilerplate.database.redis.implementation.RedisSFUpdateHash">
	</bean>

	<bean id="scriptService" class="com.boilerplate.service.implemetations.ScriptService"
		init-method="initialize">
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="userService" ref="userService"></property>
	</bean>

	<bean id="emiCalculatorService"
		class="com.boilerplate.service.implemetations.EmiCalculatorService">
	</bean>

	<bean id="blogActivityService"
		class="com.boilerplate.service.implemetations.BlogActivityService">
		<property name="blogActivityDataAccess" ref="blogActivityDataAccess"></property>
	</bean>
	<!-- Bean for redis BlogActivity data access -->
	<bean id="blogActivityDataAccess"
		class="com.boilerplate.database.redis.implementation.RedisBlogActivity">
	</bean>

	<!--Feedback related beans -->
	<bean id="feedbackSubmittedObserver"
		class="com.boilerplate.asyncWork.AsyncWorkDispatcherObserverList">
		<property name="asyncJobList">
			<list>
				<ref bean="sendEmailOnFeedbackSubmitObserver"></ref>
			</list>
		</property>
	</bean>
	<bean id="sendEmailOnFeedbackSubmitObserver"
		class="com.boilerplate.asyncWork.SendEmailOnFeedbackSubmitObserver">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="userDataAccess" ref="userDataAccess"></property>
		<property name="fileService" ref="fileService"></property>
		<property name="contentService" ref="contentService"></property>
		<property name="file" ref="file"></property>
	</bean>

	<bean id="feedbackService" class="com.boilerplate.service.implemetations.FeedbackService"
		init-method="initialize">
		<property name="configurationManager" ref="configurationManager"></property>
		<property name="sendEmailOnFeedbackSubmitObserver" ref="sendEmailOnFeedbackSubmitObserver"></property>
		<property name="queueReaderJob" ref="queueReaderJob"></property>
		<property name="contentService" ref="contentService"></property>
	</bean>


</beans>
